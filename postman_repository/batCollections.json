{
	"variables": [],
	"info": {
		"name": "UIAPI's BAT Automation",
		"_postman_id": "cfdaf8ab-a0a3-81ce-3819-6382c5c36ae5",
		"description": "UIAPI's BAT Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "access token generation",
			"description": "Access token generation",
			"item": [
				{
					"name": "Access token generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if(responseCode.code === 200) {",
									"    ",
									"    response = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"accessToken\",response.oauth2.accessToken);",
									"    postman.setEnvironmentVariable(\"refreshToken\",response.oauth2.refreshToken);",
									"    postman.setEnvironmentVariable(\"expiresIn\",response.oauth2.expiresIn);",
									"    tests[\"accessToken generated\"] = responseCode.code === 200;",
									"    ",
									"} else {",
									"    ",
									"    response = JSON.parse(responseBody);",
									"    request = JSON.parse(request.data);",
									"    tests[\"accessToken generation = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = responseCode.code === 200; ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/tokenapiqa/v4/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"oauth2\": {\r\n   \"grantType\": \"password\",\r\n   \"clientId\": \"{{clientId}}\",\r\n   \"clientSecret\": \"{{clientSecret}}\",\r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n }\r\n}"
						},
						"description": "Generating access token"
					},
					"response": []
				}
			]
		},
		{
			"name": "assets",
			"description": "assets api test condition",
			"item": [
				{
					"name": "create asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 201:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"tId\", response.details[0].tId);",
									"        tests[\"entity created successfully\"] = responseCode.code === 201;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message  = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"entity = postman.getEnvironmentVariable(\"entity\");",
									"",
									"switch(entity) {",
									"    case \"assets\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"asset\");",
									"        break;",
									"    case \"persons\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"person\");",
									"        break;",
									"    case \"vehicles\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"vehicle\");",
									"        break;",
									"    case \"sensors\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"sensor\");",
									"        break;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"name\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"surname\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"givenNames\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"emailAdrs\",Math.random().toString(36).substring(2, 15)+\"@mailinator.com\");",
									"postman.setEnvironmentVariable(\"mnf\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"mdl\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"sn\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"vin\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"lic\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"loc\",\"[\"+pvt.loc+\"]\");",
									"postman.setEnvironmentVariable(\"distance\",1);",
									"postman.setEnvironmentVariable(\"count\",0);",
									"postman.setEnvironmentVariable(\"totalCount\",4);",
									"",
									"postman.setEnvironmentVariable(\"baseUrl\",\"https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/{{entity}}/v2?accountTId={{accountTId}}\");",
									"postman.setEnvironmentVariable(\"description0\",\"search with only accountTId\");",
									"postman.setEnvironmentVariable(\"case1\",\"&pageSize={{pageSize}}\");",
									"postman.setEnvironmentVariable(\"description1\",\"search with accountTId and pageSize\");",
									"postman.setEnvironmentVariable(\"case2\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}\");",
									"postman.setEnvironmentVariable(\"description2\",\"search with accountTId,pageSize and pageIndex\");",
									"postman.setEnvironmentVariable(\"case3\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}\");",
									"postman.setEnvironmentVariable(\"description3\",\"search with accountTId,pageSize,pageIndex and period\");",
									"postman.setEnvironmentVariable(\"case4\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}&sortBy={{sortBy}}\");",
									"postman.setEnvironmentVariable(\"description4\",\"search with accountTId,pageSize,pageIndex,period and sortBy\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/{{entity}}/v4.3",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"{{entity}}\":\n        [\n      {\n      \"mnf\": \"{{mnf}}\",\n      \"mdl\": \"{{mdl}}\",\n      \"sn\": \"{{sn}}\",\n      \"name\": \"{{name}}\",\n      \"vin\" : \"{{vin}}\",\n     \"accountTId\":\"{{accountTId}}\",\n      \"af\": {\n        \"GMGR\": {\n          \"key\": \"Geomana^^ger\"\n        },\n        \"VSS\": {\n          \"key\": \"VISION-link\"\n        }\n      },\n      \"type\": \"assets/\",\n      \"descr\": \"QA t&est Asset\"\n    }\n          \n    ]\n}\n\n\n"
						},
						"description": "creating an asset using core apis"
					},
					"response": []
				},
				{
					"name": "create sensor",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 201:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"sensorTId\", response.details[0].tId);",
									"        tests[\"entity created successfully\"] = responseCode.code === 201;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message  = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/sensors/v4.3",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sensors\":\n        [\n      {\n      \"mnf\": \"{{mnf}}\",\n      \"mdl\": \"{{mdl}}\",\n      \"sn\": \"{{sn}}\",\n      \"name\": \"{{name}}\",\n     \"accountTId\":\"{{accountTId}}\",\n      \"af\": {\n        \"GMGR\": {\n          \"key\": \"Geomana^^ger\"\n        },\n        \"VSS\": {\n          \"key\": \"VISION-link\"\n        }\n      },\n      \"type\": \"sensors/\",\n      \"descr\": \"QA t&est Asset\"\n    }\n          \n    ]\n}\n\n\n"
						},
						"description": "creating an sensor using core apis"
					},
					"response": []
				},
				{
					"name": "Association Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 201:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"associationTId\", response.details[0].tId);",
									"        tests[\"Sensor associated with Asset\"] = responseCode.code === 201;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message  = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"",
									"var date = new Date();",
									"var isoDate = date.toISOString();",
									"postman.setEnvironmentVariable(\"date\",isoDate);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/associations/v4.3",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"associations\": \n  [ \n    { \n      \"name\": \"{{name}}\", \n      \"descr\": \"INSTALLED_IN\",\n      \"accountTId\":\"{{accountTId}}\",\n      \"type\": \"INSTALLED_IN\", \n      \"pmryTId\": \"{{sensorTId}}\",\n      \"scdyTId\": \"{{tId}}\",\n      \"pmryObjCat\": \"SENSORS\",\n      \"scdyObjCat\": \"ASSETS\"\n    }\n  ]\n}"
						},
						"description": "Association Sensor with Asset"
					},
					"response": []
				},
				{
					"name": "event firing",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        tests[\"Event fired\"] = responseCode.code === 200;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\" response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\" response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/events/v4",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"events\":\n [\n   {\n     \"type\": \"Events\",\n     \"objTId\":\"{{sensorTId}}\",\n     \"pvt\": {{pvt}},\n     \"ocrdDt\":\"{{date}}\",\n     \"obsvdDt\": \"{{date}}\",\n     \"eventCode\":\"7\",\n      \"eventData\":\n        {\n         \"rpm\":\"2016\"\n       },\n     \"rawData\": \"$$358901049689075,4001,2015/01/05,13:23:24,51.87086,0.76902,40.6,62.7,0.0,0.6,1841,42.5,7,0.8,189,65.0,14.3,21,1,0,0.0,478,366,383,015##\"\n   }\n ]\n}"
						},
						"description": "event firing to assets"
					},
					"response": []
				},
				{
					"name": "pvt and associtation check",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"var responsAssetTId = \"\";",
									"var responseSensorTId = \"\";",
									"var responseAssetPvt = false;",
									"var responseSensorPvt = false;",
									"var responseAssociationTId = \"\";",
									"var collectionUnitName = \"pvt and association first check\";",
									"",
									"",
									"switch (responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        sensorTId = postman.getEnvironmentVariable(\"sensorTId\");",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        associationTId = postman.getEnvironmentVariable(\"associationTId\");",
									"        ",
									"        response[entity].forEach(function(assets) {",
									"            var check1 =  Object.getOwnPropertyNames(assets).map(function(key) {",
									"                if (key === \"tId\") {",
									"                    if(assets[key] === tId) {",
									"                        responseAssetTId = assets[key];  ",
									"                    }",
									"                }",
									"            ",
									"                if (key === \"pvt\") {",
									"                    if(_.isEqual(assets[key].loc,pvt.loc)) {",
									"                        responseAssetPvt = true; ",
									"                    }",
									"                }",
									"            ",
									"                if (key === \"sensors\") {",
									"                    assets[key].forEach(function(sensors) {",
									"                        var check2 =  Object.getOwnPropertyNames(sensors).map(function(key) { ",
									"                       ",
									"                            if(key === \"associations\") {",
									"                                sensors[key].forEach(function(associations) {",
									"                                    var check3 = Object.getOwnPropertyNames(associations).map(function(key) {",
									"                                    ",
									"                                        if(key === \"tId\") {",
									"                                            if(associations[key] === associationTId) {",
									"                                                responseAssociationTId = associations[key];",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                });",
									"                            }",
									"                        ",
									"                            if(key === \"value\") {",
									"                                var values = sensors[key];",
									"                                var check3 = Object.getOwnPropertyNames(values).map(function(key) {",
									"                                    if(key === \"tId\") {",
									"                                        if(values[key] === sensorTId) {",
									"                                            responseSensorTId = values[key];",
									"                                        }",
									"                                    }",
									"                                ",
									"                                    if(key === \"pvt\") {",
									"                                        if(_.isEqual(values[key].loc,pvt.loc)) {",
									"                                            responseSensorPvt = true;",
									"                                        }",
									"                                    }",
									"                                });",
									"                            }",
									"                        }); ",
									"                    });",
									"                }",
									"            });",
									"        });",
									"        ",
									"        ",
									"        tests[\"asset tId check\"] = tId === responseAssetTId;",
									"        tests[\"association tId check\"] = associationTId === responseAssociationTId;",
									"        tests[\"sensor tId check\"] = sensorTId === responseSensorTId;",
									"        tests[\"pvt check in both assets and sensors\"] = (responseAssetPvt && responseSensorPvt) === true;",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function wait(ms){",
									"   var start = new Date().getTime();",
									"   var end = start;",
									"   while(end < start + ms) {",
									"     end = new Date().getTime();",
									"  }",
									"}",
									"wait(15000);",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/{{entity}}/v2?accountTId={{accountTId}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"tId\" : [\"{{tId}}\"]      \n    }  \n  } \n}"
						},
						"description": "Check pvt persisting in both Asset and sensor"
					},
					"response": []
				},
				{
					"name": "search with vin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with vin\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        vin = postman.getEnvironmentVariable(\"vin\");",
									"",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"vin\") {",
									"                        if(value[key] === vin) {",
									"                            tests[\"vin check \"] = value[key] == vin;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with vin\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"vin\" : [\"{{vin}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing vin search"
					},
					"response": []
				},
				{
					"name": "search with mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with mnf\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"mnf\") {",
									"                        if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with mnf\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"mnf\" : [\"{{mnf}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing mnf search"
					},
					"response": []
				},
				{
					"name": "search with mdl",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with mdl\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"mdl\") {",
									"                        if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with mdl\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"mdl\" : [\"{{mdl}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "testing mdl search"
					},
					"response": []
				},
				{
					"name": "search with sn",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with sn\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"sn\") {",
									"                        if(value[key] === sn) {",
									"                            tests[\"sn check \"] = value[key] == sn;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with sn\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"sn\" : [\"{{sn}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing sn search"
					},
					"response": []
				},
				{
					"name": "search with type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with type\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        type = postman.getEnvironmentVariable(\"type\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"type\") {",
									"                        if(value[key] === type) {",
									"                            tests[\"type check \"] = value[key] == type;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with type\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"type\" : [\"{{entity}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing sn search"
					},
					"response": []
				},
				{
					"name": "search with all search filter without pvt",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with all search filter without pvt\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        vin = postman.getEnvironmentVariable(\"vin\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                    switch (key) {",
									"                        ",
									"                        case \"name\":",
									"                            if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mnf\":",
									"                            if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mdl\":",
									"                            if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"vin\":",
									"                            if(value[key] === vin) {",
									"                            tests[\"vin check \"] = value[key] == vin;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"sn\":",
									"                            if(value[key] === sn) {",
									"                            tests[\"sn check \"] = value[key] == sn;",
									"                        }",
									"                        break;",
									"                            ",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with all search filter without pvt\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"name\" : [\"{{name}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"sn\" : [\"{{sn}}\"],\n        \"vin\" : [\"{{vin}}\"],\n        \"mnf\" : [\"{{mnf}}\"]\n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with all filters"
					},
					"response": []
				},
				{
					"name": "search with all search filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with all search filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        vin = postman.getEnvironmentVariable(\"vin\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                    switch (key) {",
									"                        ",
									"                        case \"pvt\":",
									"                            if(_.isEqual(value[key].loc,pvt.loc)) {",
									"                                tests[\"pvt check\"] = true;",
									"                            }",
									"                            break;",
									"                        ",
									"                        case \"name\":",
									"                            if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mnf\":",
									"                            if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mdl\":",
									"                            if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"vin\":",
									"                            if(value[key] === vin) {",
									"                            tests[\"vin check \"] = value[key] == vin;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"sn\":",
									"                            if(value[key] === sn) {",
									"                            tests[\"sn check \"] = value[key] == sn;",
									"                        }",
									"                        break;",
									"                            ",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with all search filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"name\" : [\"{{name}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"sn\" : [\"{{sn}}\"],\n        \"vin\" : [\"{{vin}}\"],\n        \"mnf\" : [\"{{mnf}}\"],\n        \"pvt\" : {\n        \t\"loc\": {{loc}},\n        \t\"distance\": {{distance}}\n        } \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with all filters"
					},
					"response": []
				},
				{
					"name": "search with pvt",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with pvt\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"pvt\") {",
									"                        if(_.isEqual(value[key].loc,pvt.loc)) {",
									"                            tests[\"pvt check\"] = true;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with pvt\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"pvt\" : {\n          \"loc\": {{loc}},\n          \"distance\": {{distance}}\n        }   \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing pvt search"
					},
					"response": []
				},
				{
					"name": "associated filter false",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"associated filter false\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        associationCheck = true;",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        try {",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"sensors\") {",
									"                        if(value[key].length !== 0) ",
									"                            throw BreakException;",
									"                        }",
									"                    });",
									"                });                ",
									"        } catch (e) {",
									"            associationCheck = false;",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"associated filter false\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n\t\t\"associated\":false    \n    }  \n  } \n}"
						},
						"description": "searching associated filter with false condition"
					},
					"response": []
				},
				{
					"name": "associated filter true",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"associated filter true\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        associationCheck = true;",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        try {",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"sensors\") {",
									"                        if(value[key].length === 0) ",
									"                            throw BreakException;",
									"                        }",
									"                    });",
									"                });                ",
									"        } catch (e) {",
									"            associationCheck = false;",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"associated filter true\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n    \"associated\":true    \n    }  \n  } \n}"
						},
						"description": "Testing with association filter with true condition"
					},
					"response": []
				},
				{
					"name": "All search filter with Associated false",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"All search filter with Associated false\";",
									"",
									"switch (responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        searchName = postman.getEnvironmentVariable(\"searchName\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        vin = postman.getEnvironmentVariable(\"vin\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            try {",
									"                ",
									"                response[entity].forEach(function(value) {",
									"                    var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                        switch(key) {",
									"                    ",
									"                            case \"name\":",
									"                                if(value[key] === searchName) {",
									"                                    tests[\"name check \"] = value[key] == searchName;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"mnf\":",
									"                                if(value[key] === mnf) {",
									"                                    tests[\"mnf check \"] = value[key] == mnf;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"mdl\":",
									"                                if(value[key] === mdl) {",
									"                                    tests[\"mdl check \"] = value[key] == mdl;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"vin\":",
									"                                if(value[key] === vin) {",
									"                                    tests[\"vin check \"] = value[key] == vin;",
									"                                }",
									"                                break;",
									"                    ",
									"                            case \"sn\":",
									"                                if(value[key] === sn) {",
									"                                    tests[\"sn check \"] = value[key] == sn;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"pvt\":",
									"                                if(_.isEqual(value[key].loc,pvt.loc)) {",
									"                                    tests[\"pvt check\"] = true;",
									"                                }",
									"                                break;",
									"                                ",
									"                            case \"sensors\":",
									"                                if(value[key].length !== 0) ",
									"                                    throw BreakException;",
									"                                break;",
									"                        }",
									"                ",
									"                    });",
									"                });",
									"                ",
									"            } catch (e) {",
									"                associationCheck = false;",
									"            }",
									"            ",
									"        }",
									"    ",
									"        tests[\"Association check\"] = associationCheck = true;",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"All search filter with Associated false\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"name\" : [\"{{name}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"sn\" : [\"{{sn}}\"],\n        \"vin\" : [\"{{vin}}\"],\n        \"mnf\" : [\"{{mnf}}\"],\n        \"pvt\" : {\n          \"loc\": {{loc}},\n          \"distance\": {{distance}}\n        }\n      },\n      \"associated\" : false\n    }  \n  } \n}"
						},
						"description": "All search filter with Associated false"
					},
					"response": []
				},
				{
					"name": "All search filter with Associated true",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"All search filter with Associated true\";",
									"",
									"switch (responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        searchName = postman.getEnvironmentVariable(\"searchName\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        vin = postman.getEnvironmentVariable(\"vin\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            try {",
									"                ",
									"                response[entity].forEach(function(value) {",
									"                    var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                        switch(key) {",
									"                    ",
									"                            case \"name\":",
									"                                if(value[key] === searchName) {",
									"                                    tests[\"name check \"] = value[key] == searchName;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"mnf\":",
									"                                if(value[key] === mnf) {",
									"                                    tests[\"mnf check \"] = value[key] == mnf;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"mdl\":",
									"                                if(value[key] === mdl) {",
									"                                    tests[\"mdl check \"] = value[key] == mdl;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"vin\":",
									"                                if(value[key] === vin) {",
									"                                    tests[\"vin check \"] = value[key] == vin;",
									"                                }",
									"                                break;",
									"                    ",
									"                            case \"sn\":",
									"                                if(value[key] === sn) {",
									"                                    tests[\"sn check \"] = value[key] == sn;",
									"                                }",
									"                                break;",
									"                        ",
									"                            case \"pvt\":",
									"                                if(_.isEqual(value[key].loc,pvt.loc)) {",
									"                                    tests[\"pvt check\"] = true;",
									"                                }",
									"                                break;",
									"                                ",
									"                            case \"sensors\":",
									"                                if(value[key].length === 0) ",
									"                                    throw BreakException;",
									"                                break;",
									"                        }",
									"                ",
									"                    });",
									"                });",
									"                ",
									"            } catch (e) {",
									"                associationCheck = false;",
									"            }",
									"            ",
									"        }",
									"    ",
									"        tests[\"Association check\"] = associationCheck = true;",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"All search filter with Associated true\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"name\" : [\"{{name}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"sn\" : [\"{{sn}}\"],\n        \"vin\" : [\"{{vin}}\"],\n        \"mnf\" : [\"{{mnf}}\"],\n        \"pvt\" : {\n        \t\"loc\": {{loc}},\n        \t\"distance\": {{distance}}\n        }\n      },\n      \"associated\" : true     \n    }  \n  } \n}"
						},
						"description": "All search filter with Associated true"
					},
					"response": []
				},
				{
					"name": "Association delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        tests[\"Association deleted\"] = responseCode.code === 200;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        tests[\"Error message = \" +\"request payload : request payload empty \"+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        tests[\"Error message  = \" +\"request payload : request payload empty \"+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/associations/v4.3/{{associationTId}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Deleting association Sensor with Asset"
					},
					"response": []
				},
				{
					"name": "Sensor delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        tests[\"Sensor deleted\"] = responseCode.code === 200;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        tests[\"Error message = \" +\"request payload : request payload empty \"+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        tests[\"Error message  = \" +\"request payload : request payload empty \"+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/sensors/v4.3/{{sensorTId}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Deleting current created sensor"
					},
					"response": []
				}
			]
		},
		{
			"name": "common",
			"description": "common Test condition for all the apis",
			"item": [
				{
					"name": "getall",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"getall\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"getall\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Testing getall"
					},
					"response": []
				},
				{
					"name": "tId filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"tId filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"tId filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"tId\" : [\"{{tId}}\"]      \n      \n    }  \n  } \n}"
						},
						"description": "Testing tId filter"
					},
					"response": []
				},
				{
					"name": "search with name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with name\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"name\") {",
									"                        if(value[key] === searchName) {",
									"                            tests[\"name check \"] = value[key] == searchName;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with name\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"name\" : [\"{{name}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with name filter"
					},
					"response": []
				},
				{
					"name": "sort filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"sort filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"    ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"sort filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"sortFields\" : [\"{{sortFields}}\"]     \n    }   \n  } \n}"
						},
						"description": "Testing sort filter"
					},
					"response": []
				},
				{
					"name": "sort && tId filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"sort && tId filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"sort && tId filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"sortFields\" : [\"{{sortFields}}\"],\n      \"tId\" : [\"{{tId}}\"]\n    }  \n  } \n}"
						},
						"description": "Testing sort && tId filter"
					},
					"response": []
				},
				{
					"name": "search name && tId filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search name && tId filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                    ",
									"                    if (key === \"name\") {",
									"                        if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search name && tId filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\" : {\n        \"name\" : [\"{{name}}\"]\n      },\n      \"tId\" : [\"{{tId}}\"]\n    }  \n  } \n}"
						},
						"description": "Testing search with name and tId filter"
					},
					"response": []
				},
				{
					"name": "applying all filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"applying all filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                    ",
									"                    if (key === \"name\") {",
									"                        if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"applying all filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\" : {\n        \"name\" : [\"{{name}}\"]\n      },\n      \"tId\" : [\"{{tId}}\"],\n      \"sortFields\" : [\"{{sortFields}}\"]\n    }  \n  } \n}"
						},
						"description": "Testing with all filter"
					},
					"response": []
				},
				{
					"name": "search name and sort filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search name and sort filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"name\") {",
									"                        if(value[key] === searchName) {",
									"                            tests[\"name check \"] = value[key] == searchName;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search name and sort filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\" : {\n        \"name\" : [\"{{name}}\"]\n      },\n      \"sortFields\" : [\"{{sortFields}}\"]\n    }  \n  } \n}"
						},
						"description": "Testing search name with sort filter"
					},
					"response": []
				},
				{
					"name": "empty filter body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"empty filter body\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"empty filter body\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n  }\n}"
						},
						"description": "Testing empty filter body"
					},
					"response": []
				},
				{
					"name": "empty filter && entity body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"empty filter && entity body\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"empty filter && entity body\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilters}}\" : {\n      \n    }\n  }\n}"
						},
						"description": "Testing empty filter && entity body"
					},
					"response": []
				},
				{
					"name": "empty search body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"empty search body\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"empty search body\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilters}}\" : {\n      \"search\" : {\n        \n      }\n    }\n  }\n}"
						},
						"description": "Testing with empty search body"
					},
					"response": []
				},
				{
					"name": "empty search && sort fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"empty search && sort fields\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"empty search && sort fields\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilters}}\" : {\n      \"search\" : {\n        \n      },\n      \"sortFields\" : []\n    }\n  }\n}"
						},
						"description": "Testing with empty search && sort fields"
					},
					"response": []
				},
				{
					"name": "empty search,sort && tId fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"empty search,sort && tId fields\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        tId = postman.getEnvironmentVariable(\"tId\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"tId\") {",
									"                        if(value[key] === tId) {",
									"                            tests[\"tId check \"] = value[key] == tId;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"empty search,sort && tId fields\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilters}}\" : {\n      \"search\" : {\n        \n      },\n      \"sortFields\" : [],\n      \"tId\" : []\n    }\n  }\n}"
						},
						"description": "Testing with empty search,sort && tId fields"
					},
					"response": []
				},
				{
					"name": "Delete entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        tests[\"Entity deleted\"] = responseCode.code === 200;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        tests[\"Error message = \" +\"request payload : request payload empty \"+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        tests[\"Error message  = \" +\"request payload : request payload empty \"+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"var totalCount = postman.getEnvironmentVariable(\"totalCount\");",
									"",
									"postman.clearEnvironmentVariable(\"vin\");",
									"postman.clearEnvironmentVariable(\"surname\");",
									"postman.clearEnvironmentVariable(\"givenNames\");",
									"postman.clearEnvironmentVariable(\"mnf\");",
									"postman.clearEnvironmentVariable(\"mdl\");",
									"postman.clearEnvironmentVariable(\"sn\");",
									"postman.clearEnvironmentVariable(\"emailAdrs\");",
									"postman.clearEnvironmentVariable(\"entityFilter\");",
									"postman.clearEnvironmentVariable(\"lic\");",
									"postman.clearEnvironmentVariable(\"name\");",
									"postman.clearEnvironmentVariable(\"tId\");",
									"postman.clearEnvironmentVariable(\"accessToken\");",
									"postman.clearEnvironmentVariable(\"pvtSearch\");",
									"postman.clearEnvironmentVariable(\"associationTId\");",
									"postman.clearEnvironmentVariable(\"sensorTId\");",
									"postman.clearEnvironmentVariable(\"date\");",
									"",
									"for(var i=1; i<=totalCount; i++) {",
									"    postman.clearEnvironmentVariable(\"case\"+i);",
									"}",
									"",
									"for(var i=0; i<=totalCount; i++) {",
									"    postman.clearEnvironmentVariable(\"Description\"+i);",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"url\");",
									"postman.clearEnvironmentVariable(\"baseUrl\");",
									"postman.clearEnvironmentVariable(\"totalCount\");",
									"postman.clearEnvironmentVariable(\"count\");",
									"postman.clearEnvironmentVariable(\"loc\");",
									"postman.clearEnvironmentVariable(\"distance\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/{{entity}}/v4.3/{{tId}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete entity"
					},
					"response": []
				}
			]
		},
		{
			"name": "metrics",
			"description": "Metrics Automation",
			"item": [
				{
					"name": "Access token generation copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var entity = postman.getEnvironmentVariable(\"entity\");",
									"var pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"",
									"switch (responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"accessToken\",response.oauth2.accessToken);",
									"        tests[\"accessToken generated\"] = responseCode.code === 200;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\" request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false;",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"accessToken generation = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"",
									"switch(entity) {",
									"    case \"assets\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"asset\");",
									"        break;",
									"    case \"persons\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"person\");",
									"        break;",
									"    case \"vehicles\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"vehicle\");",
									"        break;",
									"    case \"sensors\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"sensor\");",
									"        break;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/tokenapiqa/v4/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"oauth2\": {\r\n   \"grantType\": \"password\",\r\n   \"clientId\": \"oLXcXnpbxq84WLIMKbAgRlHBPq0a\",\r\n   \"clientSecret\": \"PteTFNyWMpyog0RlHn5YkVfsVBoa\",\r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n }\r\n}"
						},
						"description": "Generating access token"
					},
					"response": []
				},
				{
					"name": "metrics association group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var entity = postman.getEnvironmentVariable(\"entity\");",
									"",
									"var schema = {",
									"    \"id\" : \"metricAssociationCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"total\" : {\"type\" : \"number\"},",
									"        \"withAssociation\" : {\"type\" : \"number\"},",
									"        \"primaryCategory\" : {\"type\" : \"string\"},",
									"        \"associationType\" : {\"type\" : \"string\"}",
									"    }",
									"};",
									"",
									"switch (responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        if(tv4.validate(response[entity],schema)) {",
									"            tests[\"primaryCategory check\"] = entity.toUpperCase() === response[entity].primaryCategory;",
									"            tests[\"associationType check\"] = response[entity].associationType === \"INSTALLED_IN\";",
									"        }",
									"        tests[\"response validation\"] = tv4.validate(response[entity],schema);",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\" request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false;",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"accessToken generation = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"vin\");",
									"postman.clearEnvironmentVariable(\"surname\");",
									"postman.clearEnvironmentVariable(\"givenNames\");",
									"postman.clearEnvironmentVariable(\"mnf\");",
									"postman.clearEnvironmentVariable(\"mdl\");",
									"postman.clearEnvironmentVariable(\"sn\");",
									"postman.clearEnvironmentVariable(\"emailAdrs\");",
									"postman.clearEnvironmentVariable(\"entityFilter\");",
									"postman.clearEnvironmentVariable(\"lic\");",
									"postman.clearEnvironmentVariable(\"name\");",
									"postman.clearEnvironmentVariable(\"tId\");",
									"postman.clearEnvironmentVariable(\"accessToken\");",
									"postman.clearEnvironmentVariable(\"pvtSearch\");",
									"postman.clearEnvironmentVariable(\"associationTId\");",
									"postman.clearEnvironmentVariable(\"sensorTId\");",
									"postman.clearEnvironmentVariable(\"date\");"
								]
							}
						}
					],
					"request": {
						"url": " https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/metrics/associations/{{entity}}/?associations.type=installed_in&accountTId={{accountTId}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "metrics association testing for given entity"
					},
					"response": []
				}
			]
		},
		{
			"name": "persons",
			"description": "persons api test conditions",
			"item": [
				{
					"name": "create person",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 201:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"tId\", response.details[0].tId);",
									"        tests[\"entity created successfully\"] = responseCode.code === 201;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message  = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"entity = postman.getEnvironmentVariable(\"entity\");",
									"",
									"switch(entity) {",
									"    case \"assets\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"asset\");",
									"        break;",
									"    case \"persons\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"person\");",
									"        break;",
									"    case \"vehicles\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"vehicle\");",
									"        break;",
									"    case \"sensors\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"sensor\");",
									"        break;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"name\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"surname\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"givenNames\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"emailAdrs\",Math.random().toString(36).substring(2, 15)+\"@mailinator.com\");",
									"postman.setEnvironmentVariable(\"mnf\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"mdl\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"sn\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"vin\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"lic\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"loc\",\"[\"+pvt.loc+\"]\");",
									"postman.setEnvironmentVariable(\"distance\",1);",
									"postman.setEnvironmentVariable(\"count\",0);",
									"postman.setEnvironmentVariable(\"totalCount\",4);",
									"",
									"postman.setEnvironmentVariable(\"baseUrl\",\"https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/{{entity}}/v2?accountTId={{accountTId}}\");",
									"postman.setEnvironmentVariable(\"description0\",\"search with only accountTId\");",
									"postman.setEnvironmentVariable(\"case1\",\"&pageSize={{pageSize}}\");",
									"postman.setEnvironmentVariable(\"description1\",\"search with accountTId and pageSize\");",
									"postman.setEnvironmentVariable(\"case2\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}\");",
									"postman.setEnvironmentVariable(\"description2\",\"search with accountTId,pageSize and pageIndex\");",
									"postman.setEnvironmentVariable(\"case3\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}\");",
									"postman.setEnvironmentVariable(\"description3\",\"search with accountTId,pageSize,pageIndex and period\");",
									"postman.setEnvironmentVariable(\"case4\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}&sortBy={{sortBy}}\");",
									"postman.setEnvironmentVariable(\"description4\",\"search with accountTId,pageSize,pageIndex,period and sortBy\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/{{entity}}/v4.3",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"{{entity}}\":[{\n    \n      \"uId\": {\n        \"emailAdrs\": \"{{emailAdrs}}\"\n      },\n      \"accountTId\":\"{{accountTId}}\",\n      \n      \"givenNames\": \"{{givenNames}}\",\n      \"surname\": \"{{surname}}\",\n      \"lifeState\":\"ACTV\",\n        \"af\" : \n            {      \n              \"Geomanager\":\n                   {      \n                     \"color\" : \"red\" \n                   },\n                   \"VSS\":\n                   {\n                       \"color\":\"blue\"\n                   }\n            },\n            \"ud\":\n        {\n            \n            \"service\":\"credentials\"\n        },\n           \n      \"name\":\"{{name}}\",\n      \"contacts\": {\n        \"phones\": {\n          \"mobile\": \"123456-7891\",\n          \"work\": \"123-456-7891\",\n          \"home\": \"1234567891\",\n          \"other\": \"(123)-456-7891\"\n        },\n        \"emails\": {\n          \"personal\": \"{{name}}@hotmail.com\",\n          \"business\":\"123put@gmail.com\"\n        }\n      }\n}\n]\n}\n\n"
						},
						"description": "Creating person using core api"
					},
					"response": []
				},
				{
					"name": "search with surname",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with surname\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        surname = postman.getEnvironmentVariable(\"surname\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"surname\") {",
									"                        if(value[key] === surname) {",
									"                            tests[\"surname check \"] = value[key] == surname;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with surname\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"surname\" : [\"{{surname}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with surname"
					},
					"response": []
				},
				{
					"name": "search with emailAdrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with emailAdrs\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        emailAdrs = postman.getEnvironmentVariable(\"emailAdrs\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"emailAdrs\") {",
									"                        if(value[key] === emailAdrs) {",
									"                            tests[\"emailAdrs check \"] = value[key] == emailAdrs;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with emailAdrs\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"emailAdrs\" : [\"{{emailAdrs}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with emailAdrs"
					},
					"response": []
				},
				{
					"name": "search with givenNames",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with givenNames\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        givenNames = postman.getEnvironmentVariable(\"givenNames\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"givenNames\") {",
									"                        if(value[key] === givenNames) {",
									"                            tests[\"givenNames check \"] = value[key] == givenNames;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with givenNames\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"givenNames\" : [\"{{givenNames}}\"]       \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with givenNames"
					},
					"response": []
				},
				{
					"name": "search with all search filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with all search filter\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        givenNames = postman.getEnvironmentVariable(\"givenNames\");",
									"        surname = postman.getEnvironmentVariable(\"surname\");",
									"        emailAdrs = postman.getEnvironmentVariable(\"emailAdrs\");",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                    switch(key) {",
									"                        ",
									"                        case \"emailAdrs\":",
									"                            if(value[key] === emailAdrs) {",
									"                            tests[\"emailAdrs check \"] = value[key] == emailAdrs;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"name\":",
									"                            if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"givenNames\":",
									"                            if(value[key] === givenNames) {",
									"                            tests[\"givenNames check \"] = value[key] == givenNames;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"surname\":",
									"                            if(value[key] === surname) {",
									"                            tests[\"surname check \"] = value[key] == surname;",
									"                        }",
									"                        break;",
									"                        ",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with all search filter\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"givenNames\" : [\"{{givenNames}}\"],\n        \"name\" : [\"{{name}}\"],\n        \"surname\" : [\"{{surname}}\"],\n        \"emailAdrs\" : [\"{{emailAdrs}}\"]\n      }     \n    }  \n  } \n}"
						},
						"description": "Testing search with all filters"
					},
					"response": []
				}
			]
		},
		{
			"name": "refresh token generation",
			"description": "",
			"item": [
				{
					"name": "refresh token generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if(responseCode.code === 200) {",
									"    ",
									"    response = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"accessToken\",response.oauth2.accessToken);",
									"    postman.setEnvironmentVariable(\"refreshToken\",response.oauth2.refreshToken);",
									"    postman.setEnvironmentVariable(\"expiresIn\",response.oauth2.expiresIn);",
									"    tests[\"token refreshed\"] = responseCode.code === 200;",
									"    ",
									"} else {",
									"    ",
									"    response = JSON.parse(responseBody);",
									"    request = JSON.parse(request.data);",
									"    ",
									"    tests[\"accessToken generation = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = responseCode.code === 200; ",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/tokenapiqa/v4/refresh",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"oauth2\": {\r\n   \"clientId\": \"{{clientId}}\",\r\n   \"clientSecret\": \"{{clientSecret}}\",\r\n  \"refreshToken\" : \"{{refreshToken}}\"\r\n }\r\n}"
						},
						"description": "Refresh token generation"
					},
					"response": []
				}
			]
		},
		{
			"name": "sensors",
			"description": "sensors api test condition",
			"item": [
				{
					"name": "create sensor",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 201:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"tId\", response.details[0].tId);",
									"        tests[\"entity created successfully\"] = responseCode.code === 201;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message  = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"entity = postman.getEnvironmentVariable(\"entity\");",
									"",
									"switch(entity) {",
									"    case \"assets\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"asset\");",
									"        break;",
									"    case \"persons\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"person\");",
									"        break;",
									"    case \"vehicles\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"vehicle\");",
									"        break;",
									"    case \"sensors\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"sensor\");",
									"        break;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"name\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"surname\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"givenNames\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"emailAdrs\",Math.random().toString(36).substring(2, 15)+\"@mailinator.com\");",
									"postman.setEnvironmentVariable(\"mnf\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"mdl\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"sn\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"vin\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"lic\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"loc\",\"[\"+pvt.loc+\"]\");",
									"postman.setEnvironmentVariable(\"distance\",1);",
									"postman.setEnvironmentVariable(\"count\",0);",
									"postman.setEnvironmentVariable(\"totalCount\",4);",
									"",
									"postman.setEnvironmentVariable(\"baseUrl\",\"https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/{{entity}}/v2?accountTId={{accountTId}}\");",
									"postman.setEnvironmentVariable(\"description0\",\"search with only accountTId\");",
									"postman.setEnvironmentVariable(\"case1\",\"&pageSize={{pageSize}}\");",
									"postman.setEnvironmentVariable(\"description1\",\"search with accountTId and pageSize\");",
									"postman.setEnvironmentVariable(\"case2\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}\");",
									"postman.setEnvironmentVariable(\"description2\",\"search with accountTId,pageSize and pageIndex\");",
									"postman.setEnvironmentVariable(\"case3\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}\");",
									"postman.setEnvironmentVariable(\"description3\",\"search with accountTId,pageSize,pageIndex and period\");",
									"postman.setEnvironmentVariable(\"case4\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}&sortBy={{sortBy}}\");",
									"postman.setEnvironmentVariable(\"description4\",\"search with accountTId,pageSize,pageIndex,period and sortBy\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/sensors/v4.3",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sensors\":\n        [\n      {\n      \"mnf\": \"{{mnf}}\",\n      \"mdl\": \"{{mdl}}\",\n      \"sn\": \"{{sn}}\",\n      \"name\": \"{{name}}\",\n     \"accountTId\":\"{{accountTId}}\",\n      \"af\": {\n        \"GMGR\": {\n          \"key\": \"Geomana^^ger\"\n        },\n        \"VSS\": {\n          \"key\": \"VISION-link\"\n        }\n      },\n      \"type\": \"sensors/\",\n      \"descr\": \"QA t&est Asset\"\n    }\n          \n    ]\n}\n\n\n"
						},
						"description": "creating an sensor using core apis"
					},
					"response": []
				},
				{
					"name": "event firing",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        tests[\"Event fired\"] = responseCode.code === 200;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\" response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\" response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/events/v4",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"events\":\n [\n   {\n     \"type\": \"Events\",\n     \"objTId\":\"{{tId}}\",\n     \"pvt\": {{pvt}},\n     \"ocrdDt\":\"{{date}}\",\n     \"obsvdDt\": \"{{date}}\",\n     \"eventCode\":\"7\",\n      \"eventData\":\n        {\n         \"rpm\":\"2016\"\n       },\n     \"rawData\": \"$$358901049689075,4001,2015/01/05,13:23:24,51.87086,0.76902,40.6,62.7,0.0,0.6,1841,42.5,7,0.8,189,65.0,14.3,21,1,0,0.0,478,366,383,015##\"\n   }\n ]\n}"
						},
						"description": "event firing to assets"
					},
					"response": []
				},
				{
					"name": "pvt and associtation first check",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"var tIdCheck;",
									"var pvtCheck = false;",
									"",
									"if(responseCode.code === 200) {",
									"    ",
									"    response = JSON.parse(responseBody);",
									"    entity = postman.getEnvironmentVariable(\"entity\");",
									"    tId = postman.getEnvironmentVariable(\"tId\");",
									"    pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"    ",
									"    response[entity].forEach(function(sensors) {",
									"        var check1 =  Object.getOwnPropertyNames(sensors).map(function(key) {",
									"            ",
									"            switch(key) {",
									"                ",
									"                case \"tId\" :",
									"                    if(sensors[key] === tId) {",
									"                        tIdCheck = sensors[key];  ",
									"                    }",
									"                    break;",
									"                    ",
									"                case \"pvt\":",
									"                    if(_.isEqual(sensors[key].loc,pvt.loc)) {",
									"                        pvtCheck = true; ",
									"                    }",
									"                    break;",
									"                ",
									"            }",
									"        });",
									"    });",
									"    ",
									"    ",
									"    tests[\"tId check\"] = tIdCheck === tId;",
									"    tests[\"pvt check in sensor\"] = pvtCheck === true;",
									"    valid = response[entity].length;",
									"    if(valid > 0) {",
									"        tests[\"proper response\"] = true;",
									"    } else {",
									"        tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"    }",
									"} else {",
									"    ",
									"    response = JSON.parse(responseBody);",
									"    request = JSON.parse(request.data);",
									"    ",
									"    tests[\"Error Response = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = responseCode.code === 200; ",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function wait(ms){",
									"   var start = new Date().getTime();",
									"   var end = start;",
									"   while(end < start + ms) {",
									"     end = new Date().getTime();",
									"  }",
									"}",
									"wait(15000);",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/{{entity}}/v2?accountTId={{accountTId}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"tId\" : [\"{{tId}}\"]      \n    }  \n  } \n}"
						},
						"description": "Check pvt persisting in both Asset and sensor"
					},
					"response": []
				},
				{
					"name": "search with type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"Description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with type\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        type = postman.getEnvironmentVariable(\"type\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"type\") {",
									"                        if(value[key] === type) {",
									"                            tests[\"type check \"] = value[key] == type;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with type\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"type\" : [\"{{entity}}\"]     \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing type search"
					},
					"response": []
				},
				{
					"name": "search with mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with mnf\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"mnf\") {",
									"                        if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with mnf\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"mnf\" : [\"{{mnf}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing mnf search"
					},
					"response": []
				},
				{
					"name": "search with mdl",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with mdl\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"mdl\") {",
									"                        if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with mdl\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"mdl\" : [\"{{mdl}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "testing mdl search"
					},
					"response": []
				},
				{
					"name": "search with sn",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with sn\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"sn\") {",
									"                        if(value[key] === sn) {",
									"                            tests[\"sn check \"] = value[key] == sn;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with sn\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"sn\" : [\"{{sn}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing sn search"
					},
					"response": []
				},
				{
					"name": "search with pvt",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with pvt\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        valid = response[entity].length;",
									"        ",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"        ",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"pvt\") {",
									"                        if(_.isEqual(value[key].loc,pvt.loc)) {",
									"                            tests[\"pvt check\"] = true;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with pvt\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"pvt\" : {\n        \t\"loc\": {{loc}},\n        \t\"distance\": {{distance}}\n        }   \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing pvt search"
					},
					"response": []
				},
				{
					"name": "search with all allowed fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with all allowed fields\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                    switch (key) {",
									"                        ",
									"                        case \"pvt\":",
									"                            if(_.isEqual(value[key].loc,pvt.loc)) {",
									"                                tests[\"pvt check\"] = true;",
									"                            }",
									"                            break;",
									"                        ",
									"                        case \"name\":",
									"                            if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mnf\":",
									"                            if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mdl\":",
									"                            if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"sn\":",
									"                            if(value[key] === sn) {",
									"                            tests[\"sn check \"] = value[key] == sn;",
									"                        }",
									"                        break;",
									"                            ",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with all allowed fields\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {     \n      \t\"pvt\" : {\n          \"loc\": {{loc}},\n          \"distance\": {{distance}}\n        },\n        \"mnf\" : [\"{{mnf}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"sn\" : [\"{{sn}}\"],\n        \"name\" : [\"{{name}}\"]\n      }     \n    }  \n  } \n}"
						},
						"description": "Testing pvt search"
					},
					"response": []
				},
				{
					"name": "search with all search filter except pvt",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with all search filter except pvt\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        sn = postman.getEnvironmentVariable(\"sn\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                    switch (key) {",
									"                        ",
									"                        case \"name\":",
									"                            if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mnf\":",
									"                            if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mdl\":",
									"                            if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"sn\":",
									"                            if(value[key] === sn) {",
									"                            tests[\"sn check \"] = value[key] == sn;",
									"                        }",
									"                        break;",
									"                            ",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with all search filter except pvt\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {     \n        \"mnf\" : [\"{{mnf}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"sn\" : [\"{{sn}}\"],\n        \"name\" : [\"{{name}}\"]\n      }     \n    }  \n  } \n}"
						},
						"description": "Testing pvt search"
					},
					"response": []
				}
			]
		},
		{
			"name": "vehicles",
			"description": "vehicles api test condition",
			"item": [
				{
					"name": "create vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"switch(responseCode.code) {",
									"    ",
									"    case 201:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"tId\", response.details[0].tId);",
									"        tests[\"entity created successfully\"] = responseCode.code === 201;",
									"        break;",
									"        ",
									"    case 500:",
									"        ",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(responseBody)] = responseCode.code === false; ",
									"        break;",
									"        ",
									"    default:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        tests[\"Error message  = \" +\"request payload : \"+JSON.stringify(request)+\", response Body : \"+JSON.stringify(response)] = responseCode.code === false;  ",
									"        break;",
									"        ",
									"}",
									"postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"entity = postman.getEnvironmentVariable(\"entity\");",
									"",
									"switch(entity) {",
									"    case \"assets\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"asset\");",
									"        break;",
									"    case \"persons\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"person\");",
									"        break;",
									"    case \"vehicles\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"vehicle\");",
									"        break;",
									"    case \"sensors\" :",
									"        postman.setEnvironmentVariable(\"entityFilter\",\"sensor\");",
									"        break;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"name\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"surname\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"givenNames\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"emailAdrs\",Math.random().toString(36).substring(2, 15)+\"@mailinator.com\");",
									"postman.setEnvironmentVariable(\"mnf\",Math.random().toString(36).substring(2, 15));",
									"postman.setEnvironmentVariable(\"mdl\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"sn\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"vin\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"lic\",Math.floor((Math.random() * 10) + 1));",
									"postman.setEnvironmentVariable(\"loc\",\"[\"+pvt.loc+\"]\");",
									"postman.setEnvironmentVariable(\"distance\",1);",
									"postman.setEnvironmentVariable(\"count\",0);",
									"postman.setEnvironmentVariable(\"totalCount\",4);",
									"",
									"postman.setEnvironmentVariable(\"baseUrl\",\"https://api-stg.trimble.com/t/trimble.com/uiapis-qa/1.1/{{entity}}/v2?accountTId={{accountTId}}\");",
									"postman.setEnvironmentVariable(\"description0\",\"search with only accountTId\");",
									"postman.setEnvironmentVariable(\"case1\",\"&pageSize={{pageSize}}\");",
									"postman.setEnvironmentVariable(\"description1\",\"search with accountTId and pageSize\");",
									"postman.setEnvironmentVariable(\"case2\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}\");",
									"postman.setEnvironmentVariable(\"description2\",\"search with accountTId,pageSize and pageIndex\");",
									"postman.setEnvironmentVariable(\"case3\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}\");",
									"postman.setEnvironmentVariable(\"description3\",\"search with accountTId,pageSize,pageIndex and period\");",
									"postman.setEnvironmentVariable(\"case4\",\"&pageSize={{pageSize}}&pageIndex={{pageIndex}}&period={{period}}&sortBy={{sortBy}}\");",
									"postman.setEnvironmentVariable(\"description4\",\"search with accountTId,pageSize,pageIndex,period and sortBy\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://api-stg.trimble.com/t/trimble.com/qa/oculus/{{entity}}/v4.3",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"{{entity}}\":\n        [\n      {\n      \"mnf\": \"{{mnf}}\",\n      \"mdl\": \"{{mdl}}\",\n      \"sn\": \"{{sn}}\",\n      \"name\": \"{{name}}\",\n      \"lic\" : \"{{lic}}\",\n     \"accountTId\":\"{{accountTId}}\",\n      \"af\": {\n        \"GMGR\": {\n          \"key\": \"Geomana^^ger\"\n        },\n        \"VSS\": {\n          \"key\": \"VISION-link\"\n        }\n      },\n      \"type\": \"assets/\",\n      \"descr\": \"QA t&est Asset\"\n    }\n          \n    ]\n}\n\n\n"
						},
						"description": "creating an vehicle using core apis"
					},
					"response": []
				},
				{
					"name": "search with lic",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with lic\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        lic = postman.getEnvironmentVariable(\"lic\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"lic\") {",
									"                        if(value[key] === lic) {",
									"                            tests[\"lic check \"] = value[key] == lic;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with lic\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"lic\" : [\"{{lic}}\"]     \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing type search"
					},
					"response": []
				},
				{
					"name": "search with mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with mnf\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"mnf\") {",
									"                        if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with mnf\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"mnf\" : [\"{{mnf}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "Testing mnf search"
					},
					"response": []
				},
				{
					"name": "search with mdl",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with mdl\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    if (key === \"mdl\") {",
									"                        if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with mdl\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {         \n        \"mdl\" : [\"{{mdl}}\"]      \n      }     \n    }  \n  } \n}"
						},
						"description": "testing mdl search"
					},
					"response": []
				},
				{
					"name": "search with all allowed fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var valid;",
									"",
									"var schema = {",
									"    \"id\" : \"errorResponeCheck\",",
									"    \"type\" : \"object\",",
									"    \"properties\" : {",
									"        \"statusCode\" : {\"type\" : \"number\"},",
									"        \"statusDescr\" : {\"type\" : \"string\"},",
									"        \"details\" : {\"type\":\"object\",",
									"            \"properties\" : {",
									"                \"statusCode\" : {\"type\" : \"number\"},",
									"                \"statusDescr\" : {\"type\" : \"string\"}",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"statusCode\",\"statusDescr\",\"details\"],",
									"    \"additionalProperties\" : false",
									"};",
									"",
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"var Desc = postman.getEnvironmentVariable(\"description\"+count);",
									"var url = postman.getEnvironmentVariable(\"url\");",
									"var collectionUnitName = \"search with all allowed fields\";",
									"",
									"switch(responseCode.code) {",
									"    ",
									"    case 200:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        pageSize = parseInt(postman.getEnvironmentVariable(\"pageSize\"));",
									"        entity = postman.getEnvironmentVariable(\"entity\");",
									"        pageIndex = parseInt(postman.getEnvironmentVariable(\"pageIndex\"));",
									"        pvt = JSON.parse(postman.getEnvironmentVariable(\"pvt\"));",
									"        searchName = postman.getEnvironmentVariable(\"name\");",
									"        mnf = postman.getEnvironmentVariable(\"mnf\");",
									"        lic = postman.getEnvironmentVariable(\"lic\");",
									"        mdl = postman.getEnvironmentVariable(\"mdl\");",
									"        valid = response[entity].length;",
									"",
									"        if(valid > 0) {",
									"            console.log(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"proper response\"] = true;",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url );",
									"            tests[collectionUnitName+\" [\" + Desc + \"] with url : \" +url ] = false;",
									"            tests[\"response is empty = \" +\"Request payload : \"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;   ",
									"        }",
									"",
									"        if((pageIndex >= 1 || isNaN(pageIndex)) && (pageSize !==0 && pageSize < 10)) {",
									"            tests[\"validation metaInfo with pageSize\"] = response.metaInfo.hitSize <= pageSize;",
									"        }",
									"        ",
									"        if(pageIndex === 1 || isNaN(pageIndex) || isNaN(pageSize)) {",
									"            ",
									"            response[entity].forEach(function(value) {",
									"                var check =  Object.getOwnPropertyNames(value).map(function(key) {",
									"                    ",
									"                    switch (key) {",
									"                        ",
									"                        case \"name\":",
									"                            if(value[key] === searchName) {",
									"                            tests[\"searchName check \"] = value[key] == searchName;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mnf\":",
									"                            if(value[key] === mnf) {",
									"                            tests[\"mnf check \"] = value[key] == mnf;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"mdl\":",
									"                            if(value[key] === mdl) {",
									"                            tests[\"mdl check \"] = value[key] == mdl;",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"lic\":",
									"                            if(value[key] === lic) {",
									"                            tests[\"lic check \"] = value[key] == lic;",
									"                        }",
									"                        break;",
									"                            ",
									"                    }",
									"                });",
									"            });",
									"        }",
									"        ",
									"        break;",
									"        ",
									"    case 406:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 401:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 400:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 403:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"    ",
									"    case 404:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        ",
									"        if(tv4.validate(response,schema) === false) {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = tv4.validate(response,schema);",
									"        } else {",
									"            console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"            tests[\"Error code = \"+responseCode.code+\", Error validation [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = true;",
									"        }",
									"        break;",
									"        ",
									"    case 500:",
									"",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(responseBody)] = false;",
									"        break;",
									"",
									"    case 503:",
									"        ",
									"        response = JSON.parse(responseBody);",
									"        request = JSON.parse(request.data);",
									"        console.warn(count,collectionUnitName+\" [\" + Desc + \"] with url : \" +url);",
									"        tests[\"Error code = \"+responseCode.code+\", Error Response [ \"+collectionUnitName+\" [\" + Desc + \"] with url : \" +url+\" ]\"+\", Request payload :\"+JSON.stringify(request)+\", Response Body : \"+JSON.stringify(response)] = false;",
									"        break;",
									"",
									"}",
									"",
									"var totalCount = parseInt(postman.getEnvironmentVariable(\"totalCount\"));",
									"postman.setEnvironmentVariable(\"count\",++count);",
									"",
									"if(count <= totalCount) {",
									"    ",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\")+postman.getEnvironmentVariable(\"case\"+count));",
									"    postman.setNextRequest(\"search with all allowed fields\");",
									"    ",
									"} else {",
									"    ",
									"    postman.setEnvironmentVariable(\"count\",0);",
									"    ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var count = parseInt(postman.getEnvironmentVariable(\"count\"));",
									"if(count === 0) {",
									"    postman.setEnvironmentVariable(\"url\",postman.getEnvironmentVariable(\"baseUrl\"));",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": ""
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n  \"filters\" : {     \n    \"{{entityFilter}}\" : {       \n      \"search\"  : {     \n        \"mnf\" : [\"{{mnf}}\"],\n        \"mdl\" : [\"{{mdl}}\"],\n        \"lic\" : [\"{{lic}}\"],\n        \"name\" : [\"{{name}}\"]\n      }     \n    }  \n  } \n}"
						},
						"description": "Testing pvt search"
					},
					"response": []
				}
			]
		}
	]
}